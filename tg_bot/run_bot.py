import asyncio
import json
import logging
import os
import tempfile

from aiogram import Bot, Dispatcher
from aiogram import F, Router
from aiogram.client.session import aiohttp
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, File, InputFile, \
    FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import aiohttp

import bd_connect_module as main_bd
import transcription_connection_module as tranc
import s3_connect_module as s3
from messages_text import start_text, help_text

# from config import API_TOKEN

MAX_MESSAGE_LENGTH = 4000
BD_API_URL = os.getenv('BD_API_URL')
API_TOKEN = os.getenv('TELEGRAM_TOKEN')


bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

SCORE = {
    'bad': 1,
    'normal': 2,
    'best': 3,
}

import hashlib


def generate_short_id(file_id: str) -> str:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ö–µ—à–∞
    return hashlib.sha256(file_id.encode()).hexdigest()[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞


async def main():
    # dp.include_router(router)
    await dp.start_polling(bot)


class VoiceProcessing(StatesGroup):
    waiting_for_confirmation = State()


main_keyboard = ReplyKeyboardMarkup(keyboard=[
                                    [KeyboardButton(text="/start")],
                                    [KeyboardButton(text="/help"), KeyboardButton(text="/balance")],
                                    ], resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await main_bd.register_user(message.from_user.id)

    photo = FSInputFile("images/cat.png")

    await message.answer_photo(
        photo=photo,
    )

    await message.answer(text=start_text)

    await message.reply(text="–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command(commands=['balance']))
async def get_cash(message: Message):
    cash = await main_bd.get_user_cash(message.from_user.id)
    if cash is None:
        await message.reply(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
    else:
        await message.reply(text=f"–ù–∞ —Å—á–µ—Ç—É —É –≤–∞—Å:\n{cash:.2f} –ú–æ–Ω–µ—Ç")


@dp.message(Command(commands=['help']))
async def get_cash(message: Message):
    await message.answer(text=help_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.voice)
async def handle_voice(message: Message, state: FSMContext):
    voice = message.voice

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    short_id = generate_short_id(voice.file_id)
    await state.update_data({short_id: voice.file_id})

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    confirm_button = InlineKeyboardButton(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
        callback_data=f"confirm:{short_id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[confirm_button]])

    await message.reply("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                        reply_markup=inline_kb)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(VoiceProcessing.waiting_for_confirmation)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
@dp.callback_query(F.data.startswith("confirm:"))
async def confirm_audio_processing(callback: CallbackQuery, state: FSMContext):
    short_id = callback.data.split(":")[1]

    error = False

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π file_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    data = await state.get_data()
    file_id = data.get(short_id)

    if not file_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞.")
        return

    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é file_id

    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
    except Exception as e:
        await callback.message.edit_text(text=
                                         '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram\n–í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª > 20 –ú–±–∞–π—Ç.',
                                         reply_markup=None)
        return

    await callback.message.edit_text(text='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ...', reply_markup=None)

    # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    # current_datetime = datetime.now()
    # new_file_name = current_datetime.strftime('%Y_%m_%d_%H_%M_%S')

    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg_file:
        await bot.download_file(file_path, temp_ogg_file.name)

        duration = await get_audio_duration(temp_ogg_file.name)
        logging.info(f'duration: {duration}')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, wav)
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav_file:
            os.system(f"ffmpeg -y -i {temp_ogg_file.name} -ar 16000 -ac 1 {temp_wav_file.name}")

    prediction = await tranc.get_prediction(temp_wav_file.name)

    if prediction:

        transcription = await main_bd.add_transcription(callback.from_user.id, int(duration))
        if not transcription:
            logging.error("Transcription is not added to database")

        transcription_id = transcription['data']['transcription_id']

        is_file_download = await s3.send_file_to_s3(temp_wav_file.name, str(transcription_id), prediction)

        get_score_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå', callback_data=f'score:bad:{transcription_id}'),
             InlineKeyboardButton(text='üëå', callback_data=f'score:normal:{transcription_id}'),
             InlineKeyboardButton(text='‚úÖ', callback_data=f'score:best:{transcription_id}'),
             ]])

        await callback.message.edit_text("–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")

        await return_prediction(prediction, callback.message, get_score_keyboard)

    else:
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.remove(temp_ogg_file.name)
    os.remove(temp_wav_file.name)

    data.pop(short_id, None)  # –£–¥–∞–ª—è–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await state.update_data(data)


async def get_audio_duration(filename: str) -> float:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffprobe."""
    process = await asyncio.create_subprocess_exec(
        'ffprobe', '-v', 'error', '-show_entries',
        'format=duration', '-of', 'json', filename,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    stdout, stderr = await process.communicate()

    if process.returncode != 0:
        print(f"–û—à–∏–±–∫–∞ ffprobe: {stderr.decode()}")
        return 0.0

    info = json.loads(stdout.decode())
    return float(info["format"]["duration"])


async def calculate_balance(balance, duration_seconds):
    k = 0.016 * 5
    if 20 < duration_seconds < 30:
        k *= 1.5
    result = round(k * duration_seconds, 2)
    return balance + result, result


@dp.callback_query(F.data.startswith("score:"))
async def feedback_transcription(callback: CallbackQuery):
    callback_data = callback.data.split(":")
    score = SCORE[callback_data[1]]
    transcription_id = int(callback_data[2])
    logging.info(f"Transcription id: {transcription_id}, score: {score}")
    await callback.answer()

    status = await main_bd.set_transcription_score(transcription_id, score)

    if status:
        await callback.message.edit_reply_markup(reply_markup=None)

    transcription = await main_bd.get_transcription_info(transcription_id)

    if transcription:
        duration = transcription['duration_seconds']
        user_id = callback.from_user.id
        user = await main_bd.get_user_info(user_id)

        if user:
            cash = user['cash']

            new_cash, difference = await calculate_balance(cash, duration)
            result = await main_bd.set_user_cash(user_id, new_cash)
            if result:
                await callback.message.answer(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ:\n{difference:.2f} –ú–æ–Ω–µ—Ç")


async def return_prediction(prediction: str, message: Message, keyboard: InlineKeyboardMarkup):
    if len(prediction) > MAX_MESSAGE_LENGTH:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–ª–æ–≤
        lines = split_text_by_words(prediction, line_length=MAX_MESSAGE_LENGTH)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–µ–≥–æ
        with tempfile.NamedTemporaryFile('w+', suffix='.txt', encoding='utf-8') as temp_file:
            temp_file.write('\n'.join(lines))
            temp_file.flush()
            temp_file_path = temp_file.name

            input_file = FSInputFile(temp_file_path, filename="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è.txt")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞:")
            await message.reply_document(input_file, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        await message.reply(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{prediction}", reply_markup=keyboard)


def split_text_by_words(text: str, line_length: int):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è —Å–ª–æ–≤."""
    words = text.split()
    lines = []
    current_line = []

    for word in words:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
        if sum(len(w) for w in current_line) + len(current_line) + len(word) <= line_length:
            current_line.append(word)
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            lines.append(' '.join(current_line))
            current_line = [word]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if current_line:
        lines.append(' '.join(current_line))

    return lines


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot shutting down...")
